>>> { INÍCIO DO MÓDULO 5 } <<<

Link da PlayList compelta:
https://www.youtube.com/playlist?list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d

< Incorporar >
<iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?si=YJInv0QDwAt4Hmlc&amp;list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Módulo 05, Capítulo 27, Apresentação.
Vídeo:
O que vamos aprender no módulo 5? - Curso em Vídeo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=rqvn_c2n9Eg&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=1

O que vamos aprender no módulo 5 do Curso em Vídeo de HTML5 e CSS3? Veja nesse vídeo os principais tópicos do nosso primeiro módulo do curso.

Tópicos desse vídeo:
00:00 - Começa aqui o módulo 5
00:58 - O que aprendemos até aqui?
02:05 - O que aprenderemos no Módulo 5
02:22 - Conhece as caixas flexíveis?
04:23 - Conheça os layouts em grade
05:37 - O projeto final do curso 
06:39 - Quer certificado desse curso?
07:45 - Passo-a-passo pra fazer o curso pelo site
11:20 - Passo-a-passo pra conseguir o certificado 
12:35 - Dica pra economizar em créditos 
14:16 - E se eu quiser tirar dúvidas do curso?
15:45 - Encerramento

 

Módulo 05, Capítulo 27, Aula 01.
Vídeo:
Primeiros passos com Flexbox CSS - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=YeGn9nGies0&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=2

20.561 visualizações  31 de mai. de 2024  #cursohtml5css3 #modulo05
Como usar Flexbox com HTML e CSS? O que é um contêiner? O que são itens do Flexbox? Como criar um exemplo simples de site usando Flexbox? Veja nesse vídeo a resposta para essas e muitas outras perguntas.

Tópicos desse vídeo:
00:00 - Duas perguntas malucas 
    1- Qual é o formato da água?
    2- Quem é o pai?
        E até o final da aula saberemos a resposta, e isso no ajudará a entender e aprender (flex-box).
00:55 - Você conhece o curso completo?
    #---------------------------------------------
01:55 - Educação muda vidas
    #---------------------------------------------
03:06 - CSS Flexible Box Module Level 1
    É o módulo de nivel 1 que trata de caixas flexíveis; E sua reponsividade é limitada as @medias Queries e surgiu em 2017.
04:20 - CSS Grid Layout Module Level 1/2
    Também surgiu em 2017 e é o módulo de nível 2.
05:02 - Outros Layouts mais antigos
    Exemplos:
        - Block Layout
        - Inline Layout
        - Tabel Layout
        - Position Layout
06:30 - Qual é o formato da água?
    A água é adaptável a qualquer tipo e formato de recipientes; O mesmo acontece as caixas flexíveis.
    ENTÃO:
        Vai depender do recipiente(contêiner) .
08:25 - Entendendo Flexbox
09:44 - Limitações do display:block
10:32 - Comportamento do display:flex
11:50 - Comportamento de caixas flexíveis
12:27 - Caixas adaptáveis
12:49 - Eixo principal na direção vertical
13:29 - Quem é o pai?
    Quando trabalhamos com caixas flexíveis, precisamos saber quem é o "pai"; O /elemento-pai, é justamente o contêiner que vai levar a configuração(propriedade CSS) /display=flex, e habilitar para os (flex-itens = filhos)outras configurações de flexibilidade; Por isso é bom saber diferenciar quem é o /Pai que é o (flex-contêiner = elemento que envolve outros elementos) e os /Filhos que são os (flex-itens = filhos = elementos internos).
14:23 - Faça os módulos pelo site
    #--------------------------------------
14:58 - Colocando a mão na massa
*   Criamos a pasta do Módulo = "Modulo-05", dentro dela criamos a pasta de exercicio = "ex027", dentro dela criamos a pasta = "flex001" e criamos o aquivo = "index.html".
    /Adicionamos ao HTML o código base.
17:09 - Primeiro exemplo prático Flexbox
20:09 - O que veremos a seguir?



Módulo 05, Capítulo 27, Aula 02.
Vídeo:
Direções e Eixos Flexbox CSS - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=qtGI16QcV1U&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=3

Você sabe definir as direções e eixos do Flexbox? Sabe configurar a propriedade flex-direction de um Container Flexível? Sabe a diferença entre row, row-reverse, column e column-reverse? Sabe identificar o eixo principal e transversal? Veja nesse vídeo a resposta para essas e muitas outras perguntas.

Tópicos desse vídeo:
00:00 - Direções e Eixos Flexbox 
    # Vide
00:27 - O que vimos até aqui 
    #   
01:13 - Construtores de site
    #   
02:24 - Contêiner e itens
*    Que quando o flex-conteiner(pai) recebe a configuração display=flex, os filhos(flex-itens) não necessáriamente recebem essa configuração.
03:06 - Configurando o /flex-direction:-;
    OBS:
        "Essa configurações são para os /pais\ , para os conteiners."
    Existem quatro(4) configurações permitidas para essa propriedade:
    1- "row" /Linha que por padrão já vem definida pelo browser; Essa propriedade deixa os itens lado a lado.
    2- "row-reverse" /Linha-reversa, muda o fluxo dos itens da esquerda para a direita apartir do primeiro.
    3- "column" /Coluna, alinha o itens de cima para baixo, pois seu fluxo é o eixo vertical.
    4- "column-reverse" /Coluna-reversa, semelhante ao anterior, porém empilha os itens de baixo para cima.
05:08 - Direção row-reverse
    /OBS: EM idiomas onde o fluxo de leitura é da esquerda para a direita, ou de baixo para cima; Como por exemplo no /Japonês; Então a disposição dos itens ficam da direita para esquerda, pois segue o "fluxo do eixo horizontal".
05:35 - Direção column
    /OBS: EM idiomas onde o fluxo de leitura é da esquerda para a direita, ou de baixo para cima; Como por exemplo no /Japonês; Então a disposição dos itens ficam de baixo para cima, pois segue o "fluxo do eixo vertical".
06:24 - Direção column-reverse 
    OBS: EM idiomas onde o fluxo de leitura é da esquerda para a direita, ou de baixo para cima; Como por exemplo no /Japonês; Então a disposição dos itens ficam de cima para baixo, pois segue o "fluxo do eixo vertical".
07:01 - Entendendo os eixos
    Existem basicamente dois(2) eixos(axis) e cada eixo gera basicamente dois(pontos = Inicial e o final).
    1- Eixo(axis) Vertical = main-axis "Eixo Principal".
    2- Eixo(axis) horizontal = cross-axis "Eixo Transversal"
07:37 - Eixo principal
    Ponto1- main-start = Começa no valor 0 do eixoX e vai até o máximo valor do eixoX no sentido Horizontal.
        Ou seja começa no ponto inicial 0 da esquerda e vai até o ponto final máximo que fica a direita
    Ponto2- main-end = Segue o mesmo sentido citado acima.
08:09 - Eixo transversal
        Ponto1- cross-start = Começa no valor 0 do eixoY e vai até o máximo valor do eixoY no sentido Vertical.
            Ou seja começa no ponto inicial 0 da esquerda e vai até o ponto final máximo que fica em baixo.
        Ponto2- cross-end = Segue o mesmo sentido citado acima.
08:56 - Um resumo muito valioso
*   LEMBRANDO que em idiomas que o fluxo de leitura é diferente do padrão para nossa linguagem, a disposição do (axis)eixos seguem o fluxo normal, fazendo com que por exemplo o main-axis que é da esquerda para a direita, fique invertido, indo da direita para esquerda em idiomas como por exemplo os idiomas árabe e hebraico.
    Configuração das propriedades nos Eixos(axis).
    1- "flex-direction: row;" segue no /main-axis da esquerda para a direita e /cross-axis de cima para baixo.
    2- "flex-direction: row-reverse;" segue no /main-axis da direita para a esquerda e /cross-axis de cima para baixo.
    3- "flex-direction: column;" segue no /main-axis de cima para baixo e /cross-axis da esquerda para a direita.
    4- "flex-direction: column-reverse;" segue no /main-axis de baixo para cima e /cross-axis da esquerda para a direita.

*   SAIBA QUE:
    "Os itens sempre seguem (são colocados n)o sentido do main-axis".
11:10 - A importância de conhecer tudo isso
    "SIM" precisamos dessa teoria para sabermos aplicar na prática as propriedades de posicionamento/alinhamento (aninhamento).
    "Se não" aprendermos na teoria, não poderemos enender quando, como e onde aplicar por exemplo a propriedade "justify-content, align-content, o align-itens."
    "Conhecer" os eixos e as quatro direções, nos ajudará a posicionar os itens usando as propriedades.
12:01 - Faça outros cursos grátis
    #-------------------------------
12:40 - Exemplo prático
    Copiamos a pasta do exercício anterior e renomeamos para "flex002" e com isso usamos exemplo do exercício da aula anterior para aplicarmos na prática a teoria das direções e dos eixos. 
17:26 - A importância dessa teoria
#   O que ja dito foi.
18:30 - O que vem na próxima aula?



Módulo 05, Capítulo 27, Aula 03
Vídeo:
Empacotamento e fluxo no Flexbox CSS - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=KRk3tjIZeFI&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=4

    Você sabe como usar a propriedade flex-wrap dentro do container Flex do seu site? Sabe qual é a diferença entre nowrap, wrap e wrap-reverse? Sabe como funciona o flex-flow para simplificar? Veja nesse vídeo a resposta para essas e muitas outras perguntas.

Tópicos desse vídeo:

00:00 - Direções e Eixos Flexbox 
00:52 - O que aprendemos até aqui
01:27 - Quer aprender a programar?
#---------------------------------
02:42 - Entendendo o flex-wrap
    A propriedade "flex-wrap" significa /Empacotamento/Encapsulamento.
        Basicamente, essa propriedade configura o Comportamento do /flex-contêiner = Pai.
        Comportamentos:
            1- "flex-wrap: no-wrap;".
            2- "flex-wrap: wrap;".
            3- "flex-wrap: wrap-reverse;".
04:05 - O valor nowrap do flex-wrap
    1- "flex-wrap: nowrap" Significa: (Não emcapsule)/não-quebre, faz com que os flex-itens encolham mediante a diminuição do contêiner dependendo também do conteúdo, pois em alguns casos, o conteúdo vaza/transborda para fora da caixa-pai; E esse é o Comportamento = "valor" /padrão.
        Em outras palavras podemos dizer que o /nowrap é o mesmo que fazer com que os flex-itens não saiam da sequência configurada mesmo que encolham.
05:18 - O valor wrap do flex-wrap
    2- "flex-wrap: wrap;" Significa: (Sim Emcapsule)/sim-quebre, faz com os flex-itens não encolham mediante a diminuição da caixa-pai/contêiner idependente do conteúdo; Neste caso o conteúdo não vaza/transborda para fora do /Contêiner.
        Em outras palavras; o comportamento "wrap" faz com que os "flex-itens" se comportem de tal maneira que ao atigir o contêiner um espaço em que o último elemento não caiba na dimensão; Então o último flex-item quebra/desce para a próxima linha no sentido do (eixo-transversal) do /cross-axi que é para baixo.
06:40 - O valor wrap-reverse do flex-wrap 
    3- "flex-wrap: wrap-reverse;" Sigmifica: (Sim Emcapsule ao contrário)/sim-quebre-reversamente, faz com os flex-itens não encolham mediante a diminuição da caixa-pai/contêiner idependente do conteúdo; Neste caso o conteúdo não vaza/transborda para fora do /Contêiner.
        AINDA; o comportamento "wrap-reverse" faz com que os "flex-itens" se comportem de tal maneira que ao atigir o contêiner um espaço em que o último elemento não caiba na dimensão; Então o último flex-item quebra/sobe para a próxima linha no sentido oposto do (eixo-transversal) do /cross-axi que é neste caso é para cima.
08:04 - Um resumo muito importante! Anote!
*   ANOTE e salve imagens do resumo.
10:08 - Quer um notebook para desenvolvedor?
#--------------------------------------------
11:04 - Exemplo prático com flex-wrap
    Iniciamos esta aula copiando o arquivo "flex001" e renomeando para "flex003", e no "index.html" removemos a propriedade (flex: auto;) no seletor CSS "div.item".
16:00 - Simplificando tudo com flex-flow
    Essa é uma propriedade que unem as propriedades "flex-direction + flex-wrap" em uma /shorthand.
    Ex:
        Se cofiguramos o contêiner com "flex-direction: row;" e "flex-wrap: nowrap."; Então podemos usar a /shorthand e declarar a propriedade com valores = "fle-flow; row nowrap", pois dá no mesmo.
16:49 - Usando o flex-flow na prática
"
        VIDE!
"
17:39 - Usando o flex: auto
*   OBSEVAÇÃO: A propriedade flex que é uma shorthand, só funciona no flex-itens que são os filhos.
    "Quanto a essa shorthand, iremos ter mas detalhes nas aulas seguintes."
22:06 - O que vamos ver a seguir?




Módulo 05, Capítulo 27, Aula 04
Vídeo:
Alinhamento nos eixos Flexbox - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=KKdr1KZeFqk&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=5

* Você sabe usar as propriedades Flexbox justify-content e align-items? Sabe a diferença entre valores de alinhamento flex-start, flex-end, center, space-between, space-evenly e space-around? Sabe como fazer o alinhamento nos eixos principal e transversal do Flexbox? Veja nesse vídeo a resposta para essas e muitas outras perguntas.

Tópicos desse vídeo:
00:00 - Alinhamento nos eixos Flexbox
01:53 - Cursos que podem ajudar na sua carreira
#----------------------------------------------
02:52 - Uma revisão rápida  
04:25 - Alinhamento no eixo principal
    A propriedade [justify-content=""] faz o alinhamento dos flex-itens em relação ao /main-axis que é o eixo horizontal em direção do eixo X da tela.
    OBS: 
        Nem sempre o justify-content faz o alinhamento do elementos para ficarem deitados, pois se o /main-axis do box-pai for em-pé como no caso em que se usa a propriedade [flex-flow= column], então o alinhamento é verticalmente em direção do eixo Y da tela.
05:34 - justify-content: flex-start 
    Faz com que o primeiro elemento(flex-item) fique grudado no "main-start" que é o ponto inicial do "main-axis" e deixa espaço em branco(vazio) no "main-end" que é o ponto final.
07:00 - justify-content: flex-end
    Faz com que o último elemento(flex-item) fique grudado no "main-end" que é o ponto final do "main-axis" e deixa espaço em branco(vazio) no "main-start" que é o ponto inicial.
07:38 - justify-content: center
    Faz com que os elementos(flex-itens) calcule o centro do (contêiner) e se aninhem a partir do centro do /main-axis que é o Eixo Principal; Quanto aos espaços vazios(em branco) ambos ficam por igual tanto no "main-start" quanto no "main-end".
08:31 - justify-content: space-between 
    Faz com que o primeiro(flex-item) grude no "main-start" e o último(flex-item) grude no "main-end", enquanto os demais elementos(flex-itens) ficam no meio com espaçamento entre eles iguais.
09:22 - justify-content: space-evenly
    Faz com que os elementos(flex-itens) fiquem com espaçamento antes e depois deles exatamente iguais.
10:08 - justify-content: space-around
    Faz com que o espaço do (contêiner) seja dividido pelo número de (flex-itens) e apartir desse valor, os elementos são centralizados dentro desses espaçoes iguais.
        OBS: O efeito visual dessa propriedade se parece muito com o "space-evenly"; Mas a diferença consiste nos espaços do "main-star e main-end".
            ENTÃO isso faz com que o espaço no "main-start" e "main-end" fiquem iguais em relação ao primeiro e último (flex-itens), e a soma desses espaços é igual ao valor do espaço de um elemento pro outro dentro do (contêiner).
11:01 - Comparando os resultados
*   Considere os hífens(-) como o espaço entre os flex-itens definidos pela propriedade atribuida ao contêiner Pai que define o conportamento(alinhamento) dos elementos no Eixo-Principal(main-axis).
    "--------------------------DIFERENÇA--------------------------"
            A--B--C     Comportamento do /space-between
            -A-B-C-     Comportamento do /space-evenly
            -A--B--C-   Comportamento do /space-between

12:10 - E quando muda a direção dos eixos?
    Quando muda de direção, na verdade é o /maix-axis que muda.
        Por exemplo: 
            Se o contêiner Pai esta definido com a propriedade "flex-flow=column nowrap"= (flex-direction=column e flex-wrap=nowrap) e defirnirmos a propriedade "felx-start" então o espaço em branco fica em baixo, pois o primeiro "flex-item" grudou em cima.
                Esse é um exemplo de como muda as direções conforme muda o /main-axis = (Eixo Principal).

*   Aqui é um exemplo com a propriedade "flex-flow: column nowrap" definida; Com isso os flex-itens são distribidos conforme a direção do main-axis que está column(pra baixo).
(       OBSERVAÇÃO: Considere os hífen"-" como espaços vázios.       )
    "--------------------------DIFERENÇAS--------------------------"
    Comportamento do /flex-start    Comportamento do /flex-end    Comportamento do /center
                A                              -                            -
                B                              A                            A
                C                              B                            B
                -                              C                            C
                                                                            -

    Comportamento do /between    Comportamento do /flex-evenly   Comportamento do /around
                A                           -                               -
                -                           A                               A
                B                           -                               -
                -                           B                               -
                C                           -                               B
                                            C                               -
                                                                            -
                                                                            C
                                                                            -

13:53 - Ajude o projeto do Curso em Vídeo
#-----------------------------------------
14:32 - Exercício prático com alinhamentos
    Começamos então copiando o arquivo "flex001" que contém o  arquivo ".html" básico já feito e renomeamos para "flex004".
16:03 - Testando os alinhamentos que aprendemos
18:09 - Alinhamento no eixo transversal
19:07 - align-items: stretch
    Os flex-itens são esticados no sentido do cross-axis, de tal forma, que os itens ocupam toda a altura do contêiner(caixa-pai)
19:44 - align-items: flex-start
    Os flex-itens <não> esticam; Porém grudam no ínicio do contêiner(caixa-pai) no sentido do cross-axis, e todo espaço vazio fica abaixo em direção ao "cross-and.".
20:24 - align-items: flex-end e center
    /flex-end:
    Os flex-itens <não> esticam; Porém grudam no fim do contêiner(caixa-pai) no sentido do cross-axis, e todo espaço vazio fica em cima em direção ao "cross-start".
    /center:
    Os flex-itens <não> esticam; Grudam no centro do contêiner(caixa-pai) no sentido do cross-axis, e todo espaço vazio fica por igual em cima e em baixo em ambas as direções do "cross-start e cross-end".
21:16 - Teste prático do align-items
#-------------------------------------
22:22 - Está tendo alguma dificuldade?



Módulo 05, Capítulo 27, Aula 05
Vídeo:
Centralização absoluta com Flexbox - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=gfimpySRhUI&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=6

* Você sabe centralizar os elementos usando Flexbox? Sabe como fazer uma centralização absoluta dos componentes usando CSS Flexbox? Veja nesse vídeo a resposta para essas e muitas outras perguntas.

Tópicos desse vídeo:
00:00 - Centralização com Flexbox
01:33 - Quer aprender as linguagens C e C# ?
#--------------------------------------------
02:26 - Centralizando um item
04:23 - Lembrando do justify-content e align-items
05:36 - Exemplo prático para centralização
    Iniciamos a aula criando o arquivo "flex005" e o "index.html".
*   Opamos por usar as div´s semânticas por questão de pratica.
08:39 - Alinhamento da section
11:47 - Atualizando o repositório remoto
*       NÃO ESQUEÇA...
13:06 - Acompanha a gente nas redes sociais 
13:52 - O que vem a seguir?    



Módulo 05, Capítulo 27, Aula 06
Vídeo:
Alinhamento de elementos empacotados no Flexbox - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=qMTX98pCwXA&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=7

* sabe alinhar os elementos empacotados usando Flexbox? Sabe como fazer vários tipos de alinhamento dos componentes empacotados usando CSS Flexbox? Veja nesse vídeo a resposta para essas e muitas outras perguntas.

Tópicos desse vídeo:
00:00 - Alinhando conteúdo com Flexbox
02:08 - Hospedagem de sites com cursos
03:11 - O que é conteúdo empacotado?
05:33 - Entendendo a propriedade align-content
    Básicamente a propriedade "align-content">(Conteúdo de empacotamento) decide o que vai fazer com o espaço vazio(em branco) deixado pelo aninhamento dos flex-itens mediante a aplicação das propriedade "justify-content e align-itens"  ao contêiner(pai).
06:03 - Diferença align-content, align-items e justify-content
    1- "justify-content"; Alinha o conteúdo(itens) dentro do eixo principal(main-axis).
    2- "align-items"; Alinha o conteúdo(elementos) dentro do eixo transversal(cross-axis).
    3- "align-content"; Alinha os elementos no eixo transversal, somente quando eles estiverem [empacotados].

* Agora vemos abaixo os valores aceito pela propriedade "align-content"
06:48 - align-content: stretch
    Esse é o valor /PADRÃO e seu funcionamento consiste em pegar a dimensão inteira do /contêiner(PAI) e dividir em duas parte iguais isso no caso de duas(2) linhas(Ou colunas se for a configuração); Então podemos dizer que o número de linhas(colunas) será o número pelo qual a propriedade vai dividir os espaços por iguais, e assim puxar o flex-item de forma que ocupe o espaço vazio.
08:31 - align-content: flex-start
    Esse valor consiste em pegar todos os elementos e colocar grudados no /cross-start; Se o cross-start estiver em cima, então a propriedade vai colar o /flex-itens em cima e o espaço vazio(reservado) fica em baixo.
    "OBS:
        Veja que os elementos quebram normalmente, sem que ocupe o espaço vazio determinado pela propriedade em questão."
09:13 - align-content: flex-end
    Esse valor consiste em pegar todos os elementos e colocar grudados no /cross-end; Se o cross-start estiver em cima, então a propriedade vai colar o /flex-itens em baixo e o espaço vazio(reservado) fica em cima no cross-start.
    "OBS:
        Veja que os elementos quebram normalmente, sem que ocupe o espaço vazio determinado pela propriedade em questão."
09:46 - align-content: center
    Esse valor consiste em pegar todos os elementos e colocar grudados no centro /cross-axis; Isso entre o /cross-start e o /cross-end; Então o espaços vazio(reservado) ficam em ambos; Tant cross-start quanto no cross-end.
    "OBS:
        Veja que os elementos quebram normalmente, sem que ocupe o espaço vazio determinado pela propriedade em questão."
10:22 - align-content: space-between
    Esse valor consiste em pegar os primeiros elementos e colocar perto do /cross-start; Pegar os últimos elementos e colocar perto do /cross-end; Então o espaços vazios(reservados) ficam exatamente no meio do cross-start em sentido ao cross-end.
    "OBS:
        Veja que os elementos quebram normalmente, sem que ocupe o espaço vazio determinado pela propriedade em questão."
11:12 - align-content: space-evenly
    Esse valor consiste em pegar os elementos e distribuí-los de tal forma, que haja espaços vazios no ínicio e fim dos elementos calculadamente iguais, e esse mesmo valor de espaço inicial e final, é igual ao espaço em distância de um flex-item para outro.
        "OBS:
            Veja que os elementos quebram normalmente, sem que ocupe o espaço vazio determinado pela propriedade em questão."
11:58 - align-content: space-around
    Esse valor muito parecido com "strech" consiste em dividir o eixo transversal em partes iguais conforme o número de linhas, e distribuir os elementos centralizados, com espaços calculadamete iguais no ínicio e fim do croos-axis, e esse valor é dobrado para dar o espaço vaxio de uma linha de elementos para outra.
    "OBS:
        Veja que os elementos quebram normalmente, sem que ocupe o espaço vazio determinado pela propriedade em questão."
12:45 - Precisa de um computador pra estudar?
#---------------------------------------------
13:41 - Exemplo prático
    Abrimos então o /repositório-local no /Visual-Studio-Code; Copiamos o exercício "flex001" para usarmos o código base do flex-contêiner para aplicação da aula.
17:10 - Testando cada valor de align-content
21:39 - O que vem a seguir?



Módulo 05, Capítulo 27, Aula 07
Vídeo:
Anatomia dos itens Flexbox - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=D7jeyyfigBM&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=8

    Nesta aulas vamos aprender as propriedades aplicadas exclusivamente aos /flex-itens.

*   LEMBRA da propriedade "flex=auto" que usamos e depos removemos do itens?
    "Essa propriedade é usada somente em elementos filhos de contêiner-flex-box".

    1- Propriedade "order"
        Todo elemento filho (flex-item) dentro do Flexbox(contêiner), possuí o valor = 0 na propriedade /order definido por "padrão".
            Sabendo disso; Podemos então denominar valores de posição para cada /flex-item, e então o /Flexbox irá distribuir os elementos dentro do contêiner na ordem específicada na propriedade.
        Essa propriedade serve para quando queremos posicionar elementos(blocos) numa interface, onde a ordem dos elementos podem ser alteradas para se alinharem em diferentes posições e tamanhos de telas.

        Pra vermos em prática o que as imagens da aula mostrou, o que precisamos é que o /contêiner tenha a propriedade "flex-flow= row nowrap(ou wrap) = direction =row e flex-wrap=wrap(ou nowrap)"  e aos /flex-itens determinados a propriedade "order" e seu valor de posicionamento.

*       Para praticar...
$   Abrimos o repositório Github Desktop e nele abrimos o Visual Studio code;
    Copiamos a pasta do exercicio "flex001" para usarmos o código base já criado e nomeamos como "flex007".
        Ainda para explicação e prática da propriedade "align-self", nós copiamos o arquivo "flex-007" e renomeamos para "flex-008" para usarmos o código base.



Módulo 05, Capítulo 27, Aula 08
Vídeo:
Propriedade flex-basis em Flexbox - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=J8iyHpOoLSU&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=9

    Nesta aula vamos compreender um pouco sobre a propriedade "flex-basis" que é aplicada em itens/"flex-itens" de um contêiner flexível/"Flexbox".

* Como já vimos nas aulas anteriores, o Flexbox é o contêiner(flex-container) que envolve vários itens  (flex-itens), e nesta aula vamos copreender a propriedade que se aplica aos itens e não ao contêiner.
    "
    Consideramos a configuração para esta aula da seguinte maneira:
        Contêiner-flex com [flex-flow = row nowrap(flex-drection + flexwrap)] que são os padrões.
        Para os itens atribuimos o valor padrão que igual a [flex-basis = auto], o que siguinifica que é o tamanho do elemento(item) no seu eixo principal(que é a largura, por conta do flex-direction); Então o tamanho do flex-item é editada levando em consideração, o tamanho do seu conteúdo.

            1- Sendo assim se o conteúdo não ultrapassa o valor da caixa-filho(flex-item), então a caixa não muda de tamanho, por outro lado se o conteúdo aumetar ultrapassando o tamanho da caixa, então a caixa cresce automáticamente para (comportar)/caber todo o conteúdo dentro de si no sentido do main-axis => flex-direction = row.

            2- Em outras palavras, [flex-basis = auto] quer dizer que a largura dos itens(cada elemento) é dada através do tamanho do seu conteúdo.
    "
    $ Podemos definir para a propriedade [flex-basis] um valor em "pixel".
        Esse valor fará com que os itens:
            1- Fiquem com tamanhos fixo e iguais.
            2- Não se adaptem ao tamanho do contêiner  se este for reduzido ou aumentado idempendente do conteúdo dentro dele(do item).

* Podemos definir [flex-basis] para itens individualmente e com isso definir qual tamhanho cada um vai ter.
    "EXEMPLO":
        1° /item flex-basis = 200px
        2° /item flex-basis = auto
        3° /item com flex-basis = 100px
    "MAS" normalmente fazemos a configuração para todos igualmente.

* SAIBA que a propriedade [flex-basis] não trava o item num valor determindo, pois eles são caixas flexiveis pertencentes a um contêiner-flex.
    "
        O flex-basis faz com que os itens diminuam de tamanho em quanto o contêiner diminui(enquanto dá); Quando não dá mais, a têndencia é quebrar o conteúdo dentro do elemento(item) invalidando o valor em pixel que foi configurado no flex=item.

        Por outro lado se o contêiner diminuir tanto que não consida manter a igualdade no tamanho dos filhos, então os elementos podem vazar(quebrar) por conta do flex-wrap = nowrap se estiver definido no pai.
    "

$       PRATICANDO:
    Copiamos então o arquivo "flex001" para usarmos o códido base e renomeamos para "flex009" .



Módulo 05, Capítulo 27, Aula 09
Vídeo:
Controle do tamanho de itens flexíveis - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=Le_rq-Cz_mo&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=10

    NEsta aula vamos aprender um pouco sobre as propriedades "flex-grow e flex-shrink" que se aplicam diretamente ao um ou mais "flex-itens".

*   Podemos dizer que ao definir a proprieda para o item, isso determinará o quanto o item vai:
    /flex-grow = Crescer
    /flex-shrink = Encolher

    1- Considerando um flex-box(contêiner pai) configurado com [flex-flow = row nowrap;] onde "row" direciona os itens em linha, e nowrap não permite que os elementos(itens) quebre.
        $ É IMPORTANTE que se tenha essa configuração no elemento pai, pois crescer ou diminuir vai depender de que se pode quebrar ou não, e se definimos flex-wrap no contêiner fará com que os itens não cresça pois a ordem é que quebrem quando eles não coberem mais.

*   Por padrão os valores das propriedades [flex-shrink é = 1; e flex-grow é = 0;].
    $ Isso significa que mesmo sem definir essas propriedades na CSS para os itens; Elas terão esses valores já pré-configurados, mesmo sem serem atribuídos aos elementos filhos.
    Entenda que:
    /flex-shrink = 1 quer dizer que o elemento poderá encolher, e = 0 quer dizer que não poderá encolher.
    /flex-grow = 0 quer dizer que o elemento não poderá crescer, e = 1 quer dizer que poderá crescer.

08:33
* SAIBA QUE:
    "Por padrão quando diminuimos a largura do contêiner, os flex-itens encolhem por ter a propriedade flex-shrink = 1, e não crescem se o contêiner aumentar de largura por causa da propriedade flex-grow = 0."

08:45
*   LEMBRANDO que:
    "flex-shrink e flex-grow" se aplica somente aos itens(filhos) de um contêiner pai flex-box.

08:55
    2- Quando definimos "flex-grow = 1", estamos dizendo que o item vai crescer mediante o aumento de dimensão do contêiner.
        Se diminuir a dimensão do contêiner, o flex-item leva em consideração o valor de /flex-shrink.

$ Para se ter elementos fluídos dentro do contêiner, basta definir as propriedades flex-shirnk e flex-grow com valores = 1; Com isso os elementos crescem e diminuem a votade mediante a alteração de tamanho do contêiner pai.

10:00
    3- Agora com flex-shrink = 0, e flex-grow = 1 invertemos o padrão, e isso faz com que os flex-itens mediante essa configuração Não encolham e Sim cresçam de acordo com alteração da dimensão do contêiner.
        /Se a soma de tamanho dos flex-itens ultrapassam o tamanho do contêiner, com essa configuração, eles irão quebrar(vazar) para fora da caixa-pai por causa do valor de flex-shrink = 0, que foi definido para "Não crescerem".
        /MAS se aumentar o contêiner, então por causa do valor = 1 de flex-grow, os itens vão crescer ocupando toda a dimensão que o contêiner crescer.

11:50
"VAMOS Praticar..."

11:55
    Começamos copiando o exercício "flex001" para usarmos o código base, e renomeamos para "flex010."
*    LEMBRE-SE que nesta aula usamos as configurações padrão:
"   A configuração do contêiner é:
        display = flex
        flex-flow = row nowrap (o mesmo que flex-direction = row e flex-wrap = nowrap)
    A configuração do itens é:
        flex = auto tem que ser removido
"
20:20
    /flex-grow
    Podemos definir diferentes valores de "flex-grow" para diferentes /flex-itens, usando seletores para (class) ou (id) e atribuindo a propriedade individualmente.

    $ Qual é o comportamento dos flex-itens em relação a isto?
    1- Itens com valores iguais(=) a zero(0) significa que não vai /crescer.
    2- Itens com valores (1), significa que vai /crescer em relação aos demais com valor menor.
    3- Itens com valores acima de (1), siginifica que ele vai /crescer vezes(*) mais que o item de valor = (1), isso acontence em proporção(relação) aos demais com valor = (0); Por exemplo o valor = (2) quer dizer que vai /crescer o dobro do valor que o elemento de valor maior que zero(0) e inferior a ele.
        Em outras palavras; Valores acima de (0) quer dizer que é a "proporção" em que o item vai /crescer.  
        
        "NÃO confunda":
            Por exemplo; Quando o flex-grow = 2, não significa ao pé da letra que um item vai crescer o dobro; Pois se dois itens estiverem com o mesmo valor = a 2? O que vai acontecer?
                $ A conta para definir o tamanho desses itens é baseada na "proporção", se a menor proporção de um item é = 0, então os itens de valores iguais vão crescer por iguais, se o valor for = 1, então os itens vão crescer em proporção ao valor 1.
                
23:45
    /flex-shrink
    Assim como outras propriedades; Podemos definir diferentes valores de "flex-shrink" para diferentes /flex-itens, usando seletores para (class) ou (id) e atribuindo a propriedade individualmente.

    $ Qual é o comportamento dos flex-itens em relação a isto?
    1- Itens com valores iguais(=) a zero(0) significa que não vai /encolher.
    2- Itens com valores (1), significa que vai /encolher em relação aos demais com valor menor.
    3- Itens com valores acima de (1), siginifica que ele vai /encolher vezes(*) mais que o item de valor = (1), isso acontence em proporção(relação) aos demais com valor = (0); Por exemplo o valor = (2) quer dizer que vai /encolher o dobro do valor que o elemento de valor maior que zero(0) e inferior a ele.
        Em outras palavras; Valores acima de (0) quer dizer que é a "proporção" em que o item vai /encolher.

        "NÃO confunda":
            Por exemplo; Quando o flex-shrink = 2, não significa ao pé da letra que um item vai crescer o dobro; Pois se dois itens estiverem com o mesmo valor = a 2? O que vai acontecer?
                $ A conta para definir o tamanho desses itens é baseada na "proporção", se a menor proporção de um item é = 0, então os itens de valores iguais vão diminuir por iguais, se o valor for = 1, então os itens vão diminuir em proporção ao valor 1.

24:45
    /flex-basis + /flex-grow + /flex-shrink 
    Assim como outras propriedades; Podemos definir diferentes valores de "flex-basis + flex-grow + flex-shrink" para diferentes /flex-itens, usando seletores para (class) ou (id) e atribuindo as propriedades individualmente.

27:12
"VAMOS Praticar..."



Módulo 05, Capítulo 27, Aula 10
Vídeo:
A propriedade flex - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=JSf4HuF52g0&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=11

0:45
    NEsta aula vamos aprender a simplicar o uso das propriedades /flex-basis /flex-grow e /flex-shrink em uma propriedade abreviada que tem o mesmo esfeito sobre os "itens". 

02:58
*   LEBRANDO que:
    "A propriedade aqui ensinda se aplica somente aos flex-itens, e não ao flex-container";
    $Por isso é importante saber quem é: Pai, filho, direção dos eixos, específicar os eixos, as direções dos eixos, fluxo e tudo mais do flex-box.

05:10
    A "W3C" [que é a organização que dita quais as regras da CSS e HTML], recomenda evitar o uso das propriedades com valores individuais, determinado {flex-basis, flex-grow e flex-shirink} em cada elemento.
        Não há problemas em usar; Mas exite uma propriedade que aprendemos nesta aula, que se chama (flex) e que é recomendada para usar.
    
    "EXEMPLO:"
    Se definimos para um elemento as propriedade com os seguintes valores:
        $ flex-basis: 150px;    $ flex-basis: 150px;
        $ flex-grow: 0;         $ flex-grow: 2;
        $ flex-shrink: 1;       $ flex-shrink: 0;
    
    Podemos simplificar usando a shorthand da propriedade com valores da seguinte forma:
        $ flex: 0 1 150px;      $ flex: 2 0 150px;

07:05
* NOTE ai:
    A propriedade [flex] segue a seguinte formúla(ordem):
        /flex-grow + "flex-shirink" + {flex-basis}

07:25
"Criação de um projeto----------->>>>>>>>"
    Copiamos o arquivo "flex011" da aula anterior, e romeamos para "flex012" pra usarmos o código base.

12:16
*   Entendendo mais sobre os valores na propriedade [flex]:
    1- /flex = /flex-grow + "flex-shirink" + {flex-basis}
    #PADRÃO  
    2- /flex: 0 1 auto; = É o mesmo que não atribuir NADA, é o PADRÃO.
        [Podemos não declarar os valores acima, ou se houver dúvida tem alguma configuração que vai sobrepor os valores: ENTÃO usamos o valor =  initial como vemos abaixo].
    3- /flex: initial; 
        = /flex: 0 1 auto; = PADRÃO.
    # NADA FLEXÍVEL  
    4- /flex: 0 0 auto; = É o mesmo que deixar os itens não flexíveis.
        Fazendo assim os itens não podem crescer, não podem diminuir e o tamanho vai depender do tamanho do conteúdo.
    5- /flex: none; = Segue a mesma lógica do /flex: 0 0 auto; que vimos na opção 4.
    # MÁXIMA FLEXIBILDADE  
    6- /flex: 1 1 auto; = É o contrário do anterior(flex: 0 0 auto;),.
        Com isso dizemos que o elemento vai crescer a vontade, diminuir a vontade o elemento, e o limite de aumetar e diminuir vai ser o  tamanho natural do conteúdo.
            Podemos dizer que isso é o máximo de flexibilidade que um flex-item pode ter.
    7- /flex-auto; = A lógica da configuração anterior (flex: 1 1 auto;).

    8- /flex: 3; = Assim determinamos o valor para /flex-grow
        já o "flex-shirink" + {flex-basis} ficam padronizados.
    9- /flex: 3 1 auto; = A lógica anterior que é = /flex: 3;



* Módulo 05, Capítulo 27, Aula 11
Vídeo:
Criando um menu com Flexbox (parte 1) - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=VlAv9_R_rNY&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=12

    Criamos então pasta do exercício "flex013-menu-flexbox".

03:05 
    $   Explicando o exercício(projeto).
    "Veja o vídeo aula"!

08:27
    "Estilo aplicado por meio do arquivo css esterno".
    $   Lembre-se de configurar [charset: "UTF-8";] para permissão de caracteres especias e de resetar os padrões de espaço entre elementos, usando o seletor global da tags = [*].

1-    Na estrutura do código usamos as tags semânticas e criamos o cabeçalho com menu.
        Vide:   <header> 
                    <h1> Título Principal </h1>
                    <nav>
                        <a href="#">Opção 1</a>
                        + 5 links nesse modelo.
                    </nav>
                </header>
2-         Criamos o conteúdo principal.
        Vide:   
                <main>
                    <h2> Sub-título </h2>
                    <p>
                        Parágrafos
                    </p>
                </main>

    [   Agora acompanhe o vídeo aula para ver as configurações CSS.     ]

    [   Vide próximo vídeo aula.    ]

#--------------------------------------------



* Módulo 05, Capítulo 27, Aula 12
Vídeo:
Criando um menu com Flexbox (parte 2) - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=MXYtSrkHdCs&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=13

    $       LEMBRE-SE de dar "commit to" and "Push Origin" para o repositório remoto.

{       CONTINUANDO o exercício...      }


* Módulo 05, Capítulo 27, Aula 13
Vídeo:
Menu Responsivo com Flexbox e Media Queries na Prática - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=hlp3C9QI3Qk&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=14

01:04
    Neste vídeo vamos aplicar/acrescentar os conceitos de [@media-queries] para fazermos uma versão desse exercício, exclusiva para telas menores, para resolver os problemas de quebra de menu quando visto em telas de dispositivos móveis.

01:25
    $   Lembre-se que podemos aplicar e unificar as técnicas de configuração Flexbox e Media-queries , pois nada impede o uso de ambas juntas, para refinar o projeto que se esteja desenvolvendo.

03:15
"   Na prática....      "

04:46
    $ Podemos usar a regra css para cofigurações de telas pequenas:
        Ex:    @media screen and () {}

    $ Um pouco mais sobre regras CSS para medias.
    $Visão geral criada por IA
    
        A media screen é um tipo de mídia usado em CSS para aplicar estilos a dispositivos com tela, como smartphones, tablets, laptops e desktops. 
        A regra @media screen é usada para definir que as regras de estilo serão aplicadas apenas em telas. 
        Para aplicar estilos diferentes a diferentes dispositivos ou tamanhos de tela, é possível usar os media queries. 

        Alguns comandos de media query são: 
            @media screen
            @media (min-width: valor)
            @media (max-width: valor)
            @media (orientation: portrait)
            @media (orientation: landscape)
            @media (min-resolution: valor)
            @media (max-resolution: valor)

        "PARA esta aula vamos usar a regra aplicada por meio de um link CSS."
            EX: <link rel="stylsheet" href="file-name.css" media="screen and (max-width: value)">
    
    $OBSERVAÇÃO:
    $       Teste o momento que os elementos quebram em telas menores para que se possa configurar melhor os posicionamentos.
    Ex: Nesta aula iniciamos definindo (max-width: 600px), "MAS" pode ser que o melhor resultado seja com mais ou menos pixels que isso, a depender do navegador que se está usando!.

10:17
"
    Revisando todo o código!
"



* Módulo 05, Capítulo 27, Aula 14
Vídeo:
Conteúdo flexível apenas com Flexbox (parte 1) - @CursoemVideo HTML5 + CSS3
Link:
https://www.youtube.com/watch?v=hlp3C9QI3Qk&list=PLHz_AreHm4dn1bAtIJWFrugl5z2Ej_52d&index=15

    Aprenda como utilizar Flexbox em CSS para organizar o conteúdo de um site de forma eficiente e responsiva, sem usar Media Queries. O Guanabara vai demonstrar como criar um layout onde os elementos se adaptam a diferentes tamanhos de tela, incluindo a inversão da ordem de elementos (texto e mídia) em dispositivos móveis. 

Assuntos Abordados e Tempo:
0:00 - Introdução ao exercício de Flexbox    
    #-------------------------------------
0:30 - Hospedagem profissional com Hostnet 
    #-------------------------------------
2:36 - Apresentação do layout do site a ser construído  
    $ Veja na pasta 'flex014' as imagens de exemplo.
5:03 - Início da construção do projeto    
    $ Abra o GitHub Desktop, vá no repositório que estamos trabalhando e abra no Visual Studio Code.
    Então na pasta do curso 'Curso completo e atual de HTML5 e CSS3 - Módulos', dentro da pasta 'Exercicios', dentro da pasta 'Modulo-05', dentro da pasta 'ex027' criamos a pasta 'flex014 - conteudo flex' e dentro dela criamos os arquivos básicos para a aula, que são 'inde.html  e style.css'.

    [       LEMBRANDO que:     ]
        NEste exercício não usaremos de @medias queries; Usaremos tão somente arquivo de estilo CSS.

    $ Editando a imagem no Gimp:
        1- Abra a imagem no Gimp, e vá na opção 'imagem' no menu principal;
        2- Escolha a opção "Propriedades de imagem" ou tecle "Alt + Enter";
            Com isso podemos ver a dimensão e outras informações da imagem, como /Meta_Dados etc.
            A dimensão da imagem da aula e de 400x400 pixels.
10:44 - Estrutura do código HTML  
14:21 - Reset CSS e estilos iniciais    
16:11 - Estilização do header e section    
17:55 - Preparação para a próxima aula 